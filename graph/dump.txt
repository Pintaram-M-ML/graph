package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
	"time"
)

type JobLogs struct{
	Jobname string
	TimeStamp time.Time
	Status string
}

var (
	startmap = make(map[string]time.Time)
	endmap   = make(map[string]time.Time)
)

func main() {
	fmt.Println("graph visualization...")
	file,err:=os.Open("logfile.txt")
	if err!=nil{
		log.Fatal(err)
		return
	}
	defer file.Close()
	scanner :=bufio.NewScanner(file)

	var enteries []JobLogs

	for scanner.Scan(){
		line:=scanner.Text()
		fields:=strings.Split(line,",")
		if len(fields)!=3{
			fmt.Println("invalid log format",line)
			continue
		}
		jobname:=strings.TrimSpace(fields[0])
		timestampstr:=strings.TrimSpace(fields[1])
		status:=strings.TrimSpace(fields[2])
		timestamp,err:=time.Parse(time.RFC3339,timestampstr)

		if err!=nil{
			fmt.Println("cannot convert timestamp string to time.Time",timestampstr)
			continue
		}

		if status=="start"{
			startmap[jobname]=timestamp
		}else if status=="end"{
			endmap[jobname]=timestamp
		}else{
			fmt.Println("invalid status",status)
			continue
		}

		entry:=JobLogs{
			Jobname: jobname,
			TimeStamp: timestamp,
			Status: status,
		}
		enteries=append(enteries, entry)
	}
	if err:=scanner.Err();err!=nil{
		fmt.Println(err)
		return
	}
	for _,entry:=range enteries{
		fmt.Println(entry.Jobname,entry.TimeStamp,entry.Status)
	}
	fmt.Println(enteries[0].TimeStamp.Sub(enteries[1].TimeStamp))
	fmt.Println("start map")
	for jbname,start:=range startmap{
		fmt.Println(jbname,start)
	}
	fmt.Println("end map")
	for jbname,end:=range endmap{
		fmt.Println(jbname,end)
	}

}




Job23,2025-06-05T13:39:00Z,end
Job6,2025-06-05T12:37:00Z,start
Job7,2025-06-05T13:19:00Z,en
Job20,2025-06-05T11:26:00Z,end
Job7,2025-06-05T12:59:00Z,start
Job16,2025-06-05T12:38:00Z,end